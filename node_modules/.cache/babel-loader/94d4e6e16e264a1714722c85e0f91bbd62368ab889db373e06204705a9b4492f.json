{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _toConsumableArray = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n// eslint-disable-next-line no-unused-vars\nvar _require = require('./inline-text-builder'),\n  InlineTextBuilder = _require.InlineTextBuilder;\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\nfunction charactersToCodes(str) {\n  return _toConsumableArray(str).map(function (c) {\n    return \"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, '0');\n  }).join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nvar WhitespaceProcessor = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  function WhitespaceProcessor(options) {\n    _classCallCheck(this, WhitespaceProcessor);\n    this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, '') : options.whitespaceCharacters;\n    var whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(\"^[\".concat(whitespaceCodes, \"]\"));\n    this.trailingWhitespaceRe = new RegExp(\"[\".concat(whitespaceCodes, \"]$\"));\n    this.allWhitespaceOrEmptyRe = new RegExp(\"^[\".concat(whitespaceCodes, \"]*$\"));\n    if (options.preserveNewlines) {\n      var wordOrNewlineRe = new RegExp(\"\\n|[^\\n\".concat(whitespaceCodes, \"]+\"), 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder) {\n        var transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (str) {\n          return str;\n        };\n        if (!text) {\n          return;\n        }\n        var previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        var anyMatch = false;\n        var m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n    } else {\n      var wordRe = new RegExp(\"[^\".concat(whitespaceCodes, \"]+\"), 'g');\n      this.shrinkWrapAdd = function (text, inlineTextBuilder) {\n        var transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (str) {\n          return str;\n        };\n        if (!text) {\n          return;\n        }\n        var previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        var anyMatch = false;\n        var m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n      };\n    }\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  _createClass(WhitespaceProcessor, [{\n    key: \"testLeadingWhitespace\",\n    value: function testLeadingWhitespace(text) {\n      return this.leadingWhitespaceRe.test(text);\n    }\n\n    /**\n     * Test whether the given text ends with HTML whitespace character.\n     *\n     * @param   { string }  text  The string to test.\n     * @returns { boolean }\n     */\n  }, {\n    key: \"testTrailingWhitespace\",\n    value: function testTrailingWhitespace(text) {\n      return this.trailingWhitespaceRe.test(text);\n    }\n\n    /**\n     * Test whether the given text contains any non-whitespace characters.\n     *\n     * @param   { string }  text  The string to test.\n     * @returns { boolean }\n     */\n  }, {\n    key: \"testContainsWords\",\n    value: function testContainsWords(text) {\n      return !this.allWhitespaceOrEmptyRe.test(text);\n    }\n  }]);\n  return WhitespaceProcessor;\n}();\nmodule.exports = {\n  WhitespaceProcessor: WhitespaceProcessor\n};","map":{"version":3,"names":["require","InlineTextBuilder","charactersToCodes","str","map","c","charCodeAt","toString","padStart","join","WhitespaceProcessor","options","whitespaceChars","preserveNewlines","whitespaceCharacters","replace","whitespaceCodes","leadingWhitespaceRe","RegExp","trailingWhitespaceRe","allWhitespaceOrEmptyRe","wordOrNewlineRe","shrinkWrapAdd","text","inlineTextBuilder","transform","previouslyStashedSpace","stashedSpace","anyMatch","m","exec","startNewLine","testLeadingWhitespace","pushWord","concatWord","testTrailingWhitespace","wordRe","test","module","exports"],"sources":["C:/Users/AVITA/Desktop/chatbot/node_modules/html-to-text/lib/whitespace-processor.js"],"sourcesContent":["\n// eslint-disable-next-line no-unused-vars\nconst { InlineTextBuilder } = require('./inline-text-builder');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\nfunction charactersToCodes (str) {\n  return [...str]\n    .map(c => '\\\\u' + c.charCodeAt(0).toString(16).padStart(4, '0'))\n    .join('');\n}\n\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */\nclass WhitespaceProcessor {\n\n  /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */\n  constructor (options) {\n    this.whitespaceChars = (options.preserveNewlines)\n      ? options.whitespaceCharacters.replace(/\\n/g, '')\n      : options.whitespaceCharacters;\n    const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n    this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n    this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n    this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n\n    if (options.preserveNewlines) {\n\n      const wordOrNewlineRe = new RegExp(`\\n|[^\\n${whitespaceCodes}]+`, 'gm');\n\n      /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       */\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordOrNewlineRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (m[0] === '\\n') {\n            inlineTextBuilder.startNewLine();\n          } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordOrNewlineRe.exec(text)) !== null) {\n            if (m[0] === '\\n') {\n              inlineTextBuilder.startNewLine();\n            } else {\n              inlineTextBuilder.pushWord(transform(m[0]));\n            }\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || (this.testTrailingWhitespace(text));\n        // No need to stash a space in case last added item was a new line,\n        // but that won't affect anything later anyway.\n      };\n\n    } else {\n\n      const wordRe = new RegExp(`[^${whitespaceCodes}]+`, 'g');\n\n      this.shrinkWrapAdd = function (text, inlineTextBuilder, transform = (str => str)) {\n        if (!text) { return; }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = wordRe.exec(text);\n        if (m) {\n          anyMatch = true;\n          if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          } else {\n            inlineTextBuilder.concatWord(transform(m[0]));\n          }\n          while ((m = wordRe.exec(text)) !== null) {\n            inlineTextBuilder.pushWord(transform(m[0]));\n          }\n        }\n        inlineTextBuilder.stashedSpace = (previouslyStashedSpace && !anyMatch) || this.testTrailingWhitespace(text);\n      };\n\n    }\n  }\n\n  /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testLeadingWhitespace (text) {\n    return this.leadingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testTrailingWhitespace (text) {\n    return this.trailingWhitespaceRe.test(text);\n  }\n\n  /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */\n  testContainsWords (text) {\n    return !this.allWhitespaceOrEmptyRe.test(text);\n  }\n\n}\n\nmodule.exports = { WhitespaceProcessor: WhitespaceProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}