{"ast":null,"code":"var _toConsumableArray = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toArray = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/toArray.js\").default;\nvar _classCallCheck = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/createClass.js\").default;\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from words.\n */\nvar InlineTextBuilder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  function InlineTextBuilder(options) {\n    var maxLineLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    _classCallCheck(this, InlineTextBuilder);\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n  _createClass(InlineTextBuilder, [{\n    key: \"pushWord\",\n    value: function pushWord(word) {\n      if (this.nextLineAvailableChars <= 0) {\n        this.startNewLine();\n      }\n      var isLineStart = this.nextLineWords.length === 0;\n      var cost = word.length + (isLineStart ? 0 : 1);\n      if (cost <= this.nextLineAvailableChars) {\n        // Fits into available budget\n\n        this.nextLineWords.push(word);\n        this.nextLineAvailableChars -= cost;\n      } else {\n        // Does not fit - try to split the word\n\n        // The word is moved to a new line - prefer to wrap between words.\n        var _this$splitLongWord = this.splitLongWord(word),\n          _this$splitLongWord2 = _toArray(_this$splitLongWord),\n          first = _this$splitLongWord2[0],\n          rest = _this$splitLongWord2.slice(1);\n        if (!isLineStart) {\n          this.startNewLine();\n        }\n        this.nextLineWords.push(first);\n        this.nextLineAvailableChars -= first.length;\n        var _iterator = _createForOfIteratorHelper(rest),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var part = _step.value;\n            this.startNewLine();\n            this.nextLineWords.push(part);\n            this.nextLineAvailableChars -= part.length;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n\n    /**\n     * Pop a word from the currently built line.\n     * This doesn't affect completed lines.\n     *\n     * @returns { string }\n     */\n  }, {\n    key: \"popWord\",\n    value: function popWord() {\n      var lastWord = this.nextLineWords.pop();\n      if (lastWord !== undefined) {\n        var isLineStart = this.nextLineWords.length === 0;\n        var cost = lastWord.length + (isLineStart ? 0 : 1);\n        this.nextLineAvailableChars += cost;\n      }\n      return lastWord;\n    }\n\n    /**\n     * Concat a word to the last word already in the builder.\n     * Adds a new word in case there are no words yet in the last line.\n     *\n     * @param { string } word A word to be concatenated.\n     */\n  }, {\n    key: \"concatWord\",\n    value: function concatWord(word) {\n      if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n        this.pushWord(word);\n        this.wordBreakOpportunity = false;\n      } else {\n        var lastWord = this.popWord();\n        this.pushWord(lastWord ? lastWord.concat(word) : word);\n      }\n    }\n\n    /**\n     * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n     *\n     * @param { number } n Number of line breaks that will be added to the resulting string.\n     */\n  }, {\n    key: \"startNewLine\",\n    value: function startNewLine() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.lines.push(this.nextLineWords);\n      if (n > 1) {\n        var _this$lines;\n        (_this$lines = this.lines).push.apply(_this$lines, _toConsumableArray(Array.from({\n          length: n - 1\n        }, function () {\n          return [];\n        })));\n      }\n      this.nextLineWords = [];\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n\n    /**\n     * No words in this builder.\n     *\n     * @returns { boolean }\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.lines.length === 0 && this.nextLineWords.length === 0;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.lines.length = 0;\n      this.nextLineWords.length = 0;\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n\n    /**\n     * Join all lines of words inside the InlineTextBuilder into a complete string.\n     *\n     * @returns { string }\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return [].concat(_toConsumableArray(this.lines), [this.nextLineWords]).map(function (words) {\n        return words.join(' ');\n      }).join('\\n');\n    }\n\n    /**\n     * Split a long word up to fit within the word wrap limit.\n     * Use either a character to split looking back from the word wrap limit,\n     * or truncate to the word wrap limit.\n     *\n     * @param   { string }   word Input word.\n     * @returns { string[] }      Parts of the word.\n     */\n  }, {\n    key: \"splitLongWord\",\n    value: function splitLongWord(word) {\n      var parts = [];\n      var idx = 0;\n      while (word.length > this.maxLineLength) {\n        var firstLine = word.substring(0, this.maxLineLength);\n        var remainingChars = word.substring(this.maxLineLength);\n        var splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n        if (splitIndex > -1) {\n          // Found a character to split on\n\n          word = firstLine.substring(splitIndex + 1) + remainingChars;\n          parts.push(firstLine.substring(0, splitIndex + 1));\n        } else {\n          // Not found a character to split on\n\n          idx++;\n          if (idx < this.wrapCharacters.length) {\n            // There is next character to try\n\n            word = firstLine + remainingChars;\n          } else {\n            // No more characters to try\n\n            if (this.forceWrapOnLimit) {\n              parts.push(firstLine);\n              word = remainingChars;\n              if (word.length > this.maxLineLength) {\n                continue;\n              }\n            } else {\n              word = firstLine + remainingChars;\n            }\n            break;\n          }\n        }\n      }\n      parts.push(word); // Add remaining part to array\n      return parts;\n    }\n  }]);\n  return InlineTextBuilder;\n}();\nmodule.exports = {\n  InlineTextBuilder: InlineTextBuilder\n};","map":{"version":3,"names":["require","InlineTextBuilder","options","maxLineLength","undefined","lines","nextLineWords","wordwrap","Number","MAX_VALUE","nextLineAvailableChars","wrapCharacters","longWordSplit","forceWrapOnLimit","stashedSpace","wordBreakOpportunity","word","startNewLine","isLineStart","length","cost","push","splitLongWord","first","rest","part","lastWord","pop","pushWord","popWord","concat","n","Array","from","map","words","join","parts","idx","firstLine","substring","remainingChars","splitIndex","lastIndexOf","module","exports"],"sources":["C:/Users/AVITA/Desktop/chatbot/node_modules/html-to-text/lib/inline-text-builder.js"],"sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from words.\n */\nclass InlineTextBuilder {\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  constructor (options, maxLineLength = undefined) {\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n  pushWord (word) {\n    if (this.nextLineAvailableChars <= 0) {\n      this.startNewLine();\n    }\n    const isLineStart = this.nextLineWords.length === 0;\n    const cost = word.length + (isLineStart ? 0 : 1);\n    if (cost <= this.nextLineAvailableChars) { // Fits into available budget\n\n      this.nextLineWords.push(word);\n      this.nextLineAvailableChars -= cost;\n\n    } else { // Does not fit - try to split the word\n\n      // The word is moved to a new line - prefer to wrap between words.\n      const [first, ...rest] = this.splitLongWord(word);\n      if (!isLineStart) { this.startNewLine(); }\n      this.nextLineWords.push(first);\n      this.nextLineAvailableChars -= first.length;\n      for (const part of rest) {\n        this.startNewLine();\n        this.nextLineWords.push(part);\n        this.nextLineAvailableChars -= part.length;\n      }\n\n    }\n  }\n\n  /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */\n  popWord () {\n    const lastWord = this.nextLineWords.pop();\n    if (lastWord !== undefined) {\n      const isLineStart = this.nextLineWords.length === 0;\n      const cost = lastWord.length + (isLineStart ? 0 : 1);\n      this.nextLineAvailableChars += cost;\n    }\n    return lastWord;\n  }\n\n  /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   */\n  concatWord (word) {\n    if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n      this.pushWord(word);\n      this.wordBreakOpportunity = false;\n    } else {\n      const lastWord = this.popWord();\n      this.pushWord((lastWord) ? lastWord.concat(word) : word);\n    }\n  }\n\n  /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */\n  startNewLine (n = 1) {\n    this.lines.push(this.nextLineWords);\n    if (n > 1) {\n      this.lines.push(...Array.from({ length: n - 1 }, () => []));\n    }\n    this.nextLineWords = [];\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */\n  isEmpty () {\n    return this.lines.length === 0\n        && this.nextLineWords.length === 0;\n  }\n\n  clear () {\n    this.lines.length = 0;\n    this.nextLineWords.length = 0;\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */\n  toString () {\n    return [...this.lines, this.nextLineWords]\n      .map(words => words.join(' '))\n      .join('\\n');\n  }\n\n  /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */\n  splitLongWord (word) {\n    const parts = [];\n    let idx = 0;\n    while (word.length > this.maxLineLength) {\n\n      const firstLine = word.substring(0, this.maxLineLength);\n      const remainingChars = word.substring(this.maxLineLength);\n\n      const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n\n      if (splitIndex > -1) { // Found a character to split on\n\n        word = firstLine.substring(splitIndex + 1) + remainingChars;\n        parts.push(firstLine.substring(0, splitIndex + 1));\n\n      } else { // Not found a character to split on\n\n        idx++;\n        if (idx < this.wrapCharacters.length) { // There is next character to try\n\n          word = firstLine + remainingChars;\n\n        } else { // No more characters to try\n\n          if (this.forceWrapOnLimit) {\n            parts.push(firstLine);\n            word = remainingChars;\n            if (word.length > this.maxLineLength) {\n              continue;\n            }\n          } else {\n            word = firstLine + remainingChars;\n          }\n          break;\n\n        }\n\n      }\n\n    }\n    parts.push(word); // Add remaining part to array\n    return parts;\n  }\n}\n\nmodule.exports = { InlineTextBuilder: InlineTextBuilder };\n"],"mappings":";;;;;AAAA;AACAA,OAAO,CAAC,YAAY,CAAC;;AAErB;AACA;AACA;AAFA,IAGMC,iBAAiB;EAAA;;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,2BAAaC,OAAO,EAA6B;IAAA,IAA3BC,aAAa,uEAAGC,SAAS;IAAA;IAC7C;IACA,IAAI,CAACC,KAAK,GAAG,EAAE;IACf;IACA,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACH,aAAa,GAAGA,aAAa,IAAID,OAAO,CAACK,QAAQ,IAAIC,MAAM,CAACC,SAAS;IAC1E,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACP,aAAa;IAChD,IAAI,CAACQ,cAAc,GAAGT,OAAO,CAACU,aAAa,CAACD,cAAc,IAAI,EAAE;IAChE,IAAI,CAACE,gBAAgB,GAAGX,OAAO,CAACU,aAAa,CAACC,gBAAgB,IAAI,KAAK;IAEvE,IAAI,CAACC,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,oBAAoB,GAAG,KAAK;EACnC;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,kBAAUC,IAAI,EAAE;MACd,IAAI,IAAI,CAACN,sBAAsB,IAAI,CAAC,EAAE;QACpC,IAAI,CAACO,YAAY,EAAE;MACrB;MACA,IAAMC,WAAW,GAAG,IAAI,CAACZ,aAAa,CAACa,MAAM,KAAK,CAAC;MACnD,IAAMC,IAAI,GAAGJ,IAAI,CAACG,MAAM,IAAID,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;MAChD,IAAIE,IAAI,IAAI,IAAI,CAACV,sBAAsB,EAAE;QAAE;;QAEzC,IAAI,CAACJ,aAAa,CAACe,IAAI,CAACL,IAAI,CAAC;QAC7B,IAAI,CAACN,sBAAsB,IAAIU,IAAI;MAErC,CAAC,MAAM;QAAE;;QAEP;QACA,0BAAyB,IAAI,CAACE,aAAa,CAACN,IAAI,CAAC;UAAA;UAA1CO,KAAK;UAAKC,IAAI;QACrB,IAAI,CAACN,WAAW,EAAE;UAAE,IAAI,CAACD,YAAY,EAAE;QAAE;QACzC,IAAI,CAACX,aAAa,CAACe,IAAI,CAACE,KAAK,CAAC;QAC9B,IAAI,CAACb,sBAAsB,IAAIa,KAAK,CAACJ,MAAM;QAAC,2CACzBK,IAAI;UAAA;QAAA;UAAvB,oDAAyB;YAAA,IAAdC,IAAI;YACb,IAAI,CAACR,YAAY,EAAE;YACnB,IAAI,CAACX,aAAa,CAACe,IAAI,CAACI,IAAI,CAAC;YAC7B,IAAI,CAACf,sBAAsB,IAAIe,IAAI,CAACN,MAAM;UAC5C;QAAC;UAAA;QAAA;UAAA;QAAA;MAEH;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,mBAAW;MACT,IAAMO,QAAQ,GAAG,IAAI,CAACpB,aAAa,CAACqB,GAAG,EAAE;MACzC,IAAID,QAAQ,KAAKtB,SAAS,EAAE;QAC1B,IAAMc,WAAW,GAAG,IAAI,CAACZ,aAAa,CAACa,MAAM,KAAK,CAAC;QACnD,IAAMC,IAAI,GAAGM,QAAQ,CAACP,MAAM,IAAID,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;QACpD,IAAI,CAACR,sBAAsB,IAAIU,IAAI;MACrC;MACA,OAAOM,QAAQ;IACjB;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,oBAAYV,IAAI,EAAE;MAChB,IAAI,IAAI,CAACD,oBAAoB,IAAIC,IAAI,CAACG,MAAM,GAAG,IAAI,CAACT,sBAAsB,EAAE;QAC1E,IAAI,CAACkB,QAAQ,CAACZ,IAAI,CAAC;QACnB,IAAI,CAACD,oBAAoB,GAAG,KAAK;MACnC,CAAC,MAAM;QACL,IAAMW,QAAQ,GAAG,IAAI,CAACG,OAAO,EAAE;QAC/B,IAAI,CAACD,QAAQ,CAAEF,QAAQ,GAAIA,QAAQ,CAACI,MAAM,CAACd,IAAI,CAAC,GAAGA,IAAI,CAAC;MAC1D;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,wBAAqB;MAAA,IAAPe,CAAC,uEAAG,CAAC;MACjB,IAAI,CAAC1B,KAAK,CAACgB,IAAI,CAAC,IAAI,CAACf,aAAa,CAAC;MACnC,IAAIyB,CAAC,GAAG,CAAC,EAAE;QAAA;QACT,mBAAI,CAAC1B,KAAK,EAACgB,IAAI,uCAAIW,KAAK,CAACC,IAAI,CAAC;UAAEd,MAAM,EAAEY,CAAC,GAAG;QAAE,CAAC,EAAE;UAAA,OAAM,EAAE;QAAA,EAAC,EAAC;MAC7D;MACA,IAAI,CAACzB,aAAa,GAAG,EAAE;MACvB,IAAI,CAACI,sBAAsB,GAAG,IAAI,CAACP,aAAa;IAClD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,mBAAW;MACT,OAAO,IAAI,CAACE,KAAK,CAACc,MAAM,KAAK,CAAC,IACvB,IAAI,CAACb,aAAa,CAACa,MAAM,KAAK,CAAC;IACxC;EAAC;IAAA;IAAA,OAED,iBAAS;MACP,IAAI,CAACd,KAAK,CAACc,MAAM,GAAG,CAAC;MACrB,IAAI,CAACb,aAAa,CAACa,MAAM,GAAG,CAAC;MAC7B,IAAI,CAACT,sBAAsB,GAAG,IAAI,CAACP,aAAa;IAClD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,oBAAY;MACV,OAAO,6BAAI,IAAI,CAACE,KAAK,IAAE,IAAI,CAACC,aAAa,GACtC4B,GAAG,CAAC,UAAAC,KAAK;QAAA,OAAIA,KAAK,CAACC,IAAI,CAAC,GAAG,CAAC;MAAA,EAAC,CAC7BA,IAAI,CAAC,IAAI,CAAC;IACf;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAA;IAAA,OAQA,uBAAepB,IAAI,EAAE;MACnB,IAAMqB,KAAK,GAAG,EAAE;MAChB,IAAIC,GAAG,GAAG,CAAC;MACX,OAAOtB,IAAI,CAACG,MAAM,GAAG,IAAI,CAAChB,aAAa,EAAE;QAEvC,IAAMoC,SAAS,GAAGvB,IAAI,CAACwB,SAAS,CAAC,CAAC,EAAE,IAAI,CAACrC,aAAa,CAAC;QACvD,IAAMsC,cAAc,GAAGzB,IAAI,CAACwB,SAAS,CAAC,IAAI,CAACrC,aAAa,CAAC;QAEzD,IAAMuC,UAAU,GAAGH,SAAS,CAACI,WAAW,CAAC,IAAI,CAAChC,cAAc,CAAC2B,GAAG,CAAC,CAAC;QAElE,IAAII,UAAU,GAAG,CAAC,CAAC,EAAE;UAAE;;UAErB1B,IAAI,GAAGuB,SAAS,CAACC,SAAS,CAACE,UAAU,GAAG,CAAC,CAAC,GAAGD,cAAc;UAC3DJ,KAAK,CAAChB,IAAI,CAACkB,SAAS,CAACC,SAAS,CAAC,CAAC,EAAEE,UAAU,GAAG,CAAC,CAAC,CAAC;QAEpD,CAAC,MAAM;UAAE;;UAEPJ,GAAG,EAAE;UACL,IAAIA,GAAG,GAAG,IAAI,CAAC3B,cAAc,CAACQ,MAAM,EAAE;YAAE;;YAEtCH,IAAI,GAAGuB,SAAS,GAAGE,cAAc;UAEnC,CAAC,MAAM;YAAE;;YAEP,IAAI,IAAI,CAAC5B,gBAAgB,EAAE;cACzBwB,KAAK,CAAChB,IAAI,CAACkB,SAAS,CAAC;cACrBvB,IAAI,GAAGyB,cAAc;cACrB,IAAIzB,IAAI,CAACG,MAAM,GAAG,IAAI,CAAChB,aAAa,EAAE;gBACpC;cACF;YACF,CAAC,MAAM;cACLa,IAAI,GAAGuB,SAAS,GAAGE,cAAc;YACnC;YACA;UAEF;QAEF;MAEF;MACAJ,KAAK,CAAChB,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC;MAClB,OAAOqB,KAAK;IACd;EAAC;EAAA;AAAA;AAGHO,MAAM,CAACC,OAAO,GAAG;EAAE5C,iBAAiB,EAAEA;AAAkB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}