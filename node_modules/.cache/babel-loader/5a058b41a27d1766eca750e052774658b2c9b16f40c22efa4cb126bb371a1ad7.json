{"ast":null,"code":"const merge = require('deepmerge');\nconst he = require('he');\nconst htmlparser = require('htmlparser2');\nconst {\n  BlockTextBuilder\n} = require('./block-text-builder');\nconst defaultFormatters = require('./formatter');\nconst {\n  limitedDepthRecursive,\n  set,\n  splitSelector\n} = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: 1 << 24 // 16_777_216\n  },\n\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': {\n      format: 'inline'\n    },\n    // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: {\n        baseUrl: null,\n        hideLinkHrefIfSameAsText: false,\n        ignoreHref: false,\n        noAnchorUrl: true,\n        noLinkBrackets: false\n      }\n    },\n    'article': {\n      format: 'block'\n    },\n    'aside': {\n      format: 'block'\n    },\n    'blockquote': {\n      format: 'blockquote',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        trimEmptyLines: true\n      }\n    },\n    'br': {\n      format: 'lineBreak'\n    },\n    'div': {\n      format: 'block'\n    },\n    'footer': {\n      format: 'block'\n    },\n    'form': {\n      format: 'block'\n    },\n    'h1': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h2': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h3': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h4': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h5': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h6': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'header': {\n      format: 'block'\n    },\n    'hr': {\n      format: 'horizontalLine',\n      options: {\n        leadingLineBreaks: 2,\n        length: undefined,\n        trailingLineBreaks: 2\n      }\n    },\n    'img': {\n      format: 'image',\n      options: {\n        baseUrl: null\n      }\n    },\n    'main': {\n      format: 'block'\n    },\n    'nav': {\n      format: 'block'\n    },\n    'ol': {\n      format: 'orderedList',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'p': {\n      format: 'paragraph',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'pre': {\n      format: 'pre',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'section': {\n      format: 'block'\n    },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: {\n        itemPrefix: ' * ',\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'wbr': {\n      format: 'wbr'\n    }\n  },\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction htmlToText(html) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = merge(DEFAULT_OPTIONS, options, {\n    arrayMerge: (destinationArray, sourceArray, mergeOptions) => sourceArray\n  });\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n  handleDeprecatedOptions(options);\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);\n    html = html.substring(0, maxInputLength);\n  }\n  const handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, {\n    decodeEntities: false\n  }).parseComplete(html);\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function (dom, builder) {\n    builder.addInline(options.limits.ellipsis || '');\n  });\n  const baseElements = Array.isArray(options.baseElement) ? options.baseElement : [options.baseElement];\n  const bases = baseElements.map(be => findBase(handler.dom, options, be)).filter(b => b).reduce((acc, b) => acc.concat(b), []);\n  const builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions(options) {\n  const tagDefinitions = Object.values(options.tags);\n  function copyFormatterOption(source, format, target) {\n    if (options[source] === undefined) {\n      return;\n    }\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n  if (options['ignoreImage']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'image') {\n        tagDefinition.format = 'skip';\n      }\n    }\n  }\n  if (options['singleNewLineParagraphs']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'paragraph' || tagDefinition.format === 'pre') {\n        set(tagDefinition, ['options', 'leadingLineBreaks'], 1);\n        set(tagDefinition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n}\nfunction findBase(dom, options, baseElement) {\n  let result = null;\n  const splitTag = splitSelector(baseElement);\n  function recursiveWalk(walk, /** @type { DomNode[] } */dom) {\n    if (result) {\n      return;\n    }\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (result) {\n        return;\n      }\n      if (elem.name === splitTag.element) {\n        const documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n        const documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n        if (splitTag.classes.every(function (val) {\n          return documentClasses.indexOf(val) >= 0;\n        }) && splitTag.ids.every(function (val) {\n          return documentIds.indexOf(val) >= 0;\n        })) {\n          result = [elem];\n          return;\n        }\n      }\n      if (elem.children) {\n        walk(elem.children);\n      }\n    }\n  }\n  const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk(walk, dom, builder) {\n  if (!dom) {\n    return;\n  }\n  const options = builder.options;\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text':\n        {\n          builder.addInline(he.decode(elem.data, options.decodeOptions));\n          break;\n        }\n      case 'tag':\n        {\n          const tags = options.tags;\n          const tagDefinition = tags[elem.name] || tags[''];\n          const format = options.formatters[tagDefinition.format];\n          format(elem, walk, builder, tagDefinition.options || {});\n          break;\n        }\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n  return;\n}\n\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nconst fromString = function (html) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return htmlToText(html, options);\n};\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};","map":{"version":3,"names":["merge","require","he","htmlparser","BlockTextBuilder","defaultFormatters","limitedDepthRecursive","set","splitSelector","DEFAULT_OPTIONS","baseElement","decodeOptions","isAttributeValue","strict","formatters","limits","ellipsis","maxChildNodes","undefined","maxDepth","maxInputLength","longWordSplit","forceWrapOnLimit","wrapCharacters","preserveNewlines","returnDomByDefault","tables","tags","format","options","baseUrl","hideLinkHrefIfSameAsText","ignoreHref","noAnchorUrl","noLinkBrackets","leadingLineBreaks","trailingLineBreaks","trimEmptyLines","uppercase","length","colSpacing","maxColumnWidth","rowSpacing","uppercaseHeaderCells","itemPrefix","whitespaceCharacters","wordwrap","htmlToText","html","arrayMerge","destinationArray","sourceArray","mergeOptions","Object","assign","handleDeprecatedOptions","console","warn","substring","handler","DefaultHandler","Parser","decodeEntities","parseComplete","limitedWalk","recursiveWalk","dom","builder","addInline","baseElements","Array","isArray","bases","map","be","findBase","filter","b","reduce","acc","concat","toString","tagDefinitions","values","copyFormatterOption","source","target","tagDefinition","result","splitTag","walk","slice","elem","name","element","documentClasses","attribs","class","split","documentIds","id","classes","every","val","indexOf","ids","children","tooManyChildNodes","push","data","type","decode","fromString","module","exports"],"sources":["C:/Users/AVITA/Desktop/chatbot/node_modules/html-to-text/lib/html-to-text.js"],"sourcesContent":["const merge = require('deepmerge');\nconst he = require('he');\nconst htmlparser = require('htmlparser2');\n\nconst { BlockTextBuilder } = require('./block-text-builder');\nconst defaultFormatters = require('./formatter');\nconst { limitedDepthRecursive, set, splitSelector } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: (1 << 24) // 16_777_216\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': { format: 'inline' }, // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: { baseUrl: null, hideLinkHrefIfSameAsText: false, ignoreHref: false, noAnchorUrl: true, noLinkBrackets: false }\n    },\n    'article': { format: 'block' },\n    'aside': { format: 'block' },\n    'blockquote': {\n      format: 'blockquote',\n      options: { leadingLineBreaks: 2, trailingLineBreaks: 2, trimEmptyLines: true }\n    },\n    'br': { format: 'lineBreak' },\n    'div': { format: 'block' },\n    'footer': { format: 'block' },\n    'form': { format: 'block' },\n    'h1': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h2': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h3': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h4': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h5': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h6': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'header': { format: 'block' },\n    'hr': { format: 'horizontalLine', options: { leadingLineBreaks: 2, length: undefined, trailingLineBreaks: 2 } },\n    'img': { format: 'image', options: { baseUrl: null } },\n    'main': { format: 'block' },\n    'nav': { format: 'block' },\n    'ol': { format: 'orderedList', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'p': { format: 'paragraph', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'pre': { format: 'pre', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'section': { format: 'block' },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: { itemPrefix: ' * ', leadingLineBreaks: 2, trailingLineBreaks: 2 }\n    },\n    'wbr': { format: 'wbr' }\n  },\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction htmlToText (html, options = {}) {\n  options = merge(\n    DEFAULT_OPTIONS,\n    options,\n    { arrayMerge: (destinationArray, sourceArray, mergeOptions) => sourceArray }\n  );\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n\n  handleDeprecatedOptions(options);\n\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\n      `Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`\n    );\n    html = html.substring(0, maxInputLength);\n  }\n\n  const handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, { decodeEntities: false }).parseComplete(html);\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk,\n    function (dom, builder) {\n      builder.addInline(options.limits.ellipsis || '');\n    }\n  );\n\n  const baseElements = Array.isArray(options.baseElement)\n    ? options.baseElement\n    : [options.baseElement];\n  const bases = baseElements\n    .map(be => findBase(handler.dom, options, be))\n    .filter(b => b)\n    .reduce((acc, b) => acc.concat(b), []);\n\n  const builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions (options) {\n  const tagDefinitions = Object.values(options.tags);\n\n  function copyFormatterOption (source, format, target) {\n    if (options[source] === undefined) { return; }\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'image') {\n        tagDefinition.format = 'skip';\n      }\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'paragraph' || tagDefinition.format === 'pre') {\n        set(tagDefinition, ['options', 'leadingLineBreaks'], 1);\n        set(tagDefinition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n}\n\nfunction findBase (dom, options, baseElement) {\n  let result = null;\n\n  const splitTag = splitSelector(baseElement);\n\n  function recursiveWalk (walk, /** @type { DomNode[] } */ dom) {\n    if (result) { return; }\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (result) { return; }\n      if (elem.name === splitTag.element) {\n        const documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n        const documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n\n        if (\n          splitTag.classes.every(function (val) { return documentClasses.indexOf(val) >= 0; }) &&\n          splitTag.ids.every(function (val) { return documentIds.indexOf(val) >= 0; })\n        ) {\n          result = [elem];\n          return;\n        }\n      }\n      if (elem.children) { walk(elem.children); }\n    }\n  }\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk\n  );\n\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk (walk, dom, builder) {\n  if (!dom) { return; }\n\n  const options = builder.options;\n\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text': {\n        builder.addInline(he.decode(elem.data, options.decodeOptions));\n        break;\n      }\n      case 'tag': {\n        const tags = options.tags;\n        const tagDefinition = tags[elem.name] || tags[''];\n        const format = options.formatters[tagDefinition.format];\n        format(elem, walk, builder, tagDefinition.options || {});\n        break;\n      }\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n\n  return;\n}\n\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nconst fromString = (html, options = {}) => htmlToText(html, options);\n\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}