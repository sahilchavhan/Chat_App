{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/AVITA/Desktop/chatbot/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require('./helper'),\n  trimCharacter = _require.trimCharacter;\n// eslint-disable-next-line no-unused-vars\nvar _require2 = require('./stack-item'),\n  StackItem = _require2.StackItem,\n  BlockStackItem = _require2.BlockStackItem,\n  TableCellStackItem = _require2.TableCellStackItem,\n  TableRowStackItem = _require2.TableRowStackItem,\n  TableStackItem = _require2.TableStackItem,\n  TransformerStackItem = _require2.TransformerStackItem;\nvar _require3 = require('./table-printer'),\n  tableToString = _require3.tableToString;\nvar _require4 = require('./whitespace-processor'),\n  WhitespaceProcessor = _require4.WhitespaceProcessor;\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */\nvar BlockTextBuilder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   */\n  function BlockTextBuilder(options) {\n    _classCallCheck(this, BlockTextBuilder);\n    this.options = options;\n    this.whitepaceProcessor = new WhitespaceProcessor(options);\n    /** @type { StackItem } */\n    this._stackItem = new BlockStackItem(options);\n    /** @type { TransformerStackItem } */\n    this._wordTransformer = undefined;\n  }\n\n  /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */\n  _createClass(BlockTextBuilder, [{\n    key: \"pushWordTransform\",\n    value: function pushWordTransform(wordTransform) {\n      this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n    }\n\n    /**\n     * Remove a function from the word transformations stack.\n     *\n     * @returns { (str: string) => string } A function that was removed.\n     */\n  }, {\n    key: \"popWordTransform\",\n    value: function popWordTransform() {\n      if (!this._wordTransformer) {\n        return undefined;\n      }\n      var transform = this._wordTransformer.transform;\n      this._wordTransformer = this._wordTransformer.next;\n      return transform;\n    }\n\n    /** @returns { (str: string) => string } */\n  }, {\n    key: \"_getCombinedWordTransformer\",\n    value: function _getCombinedWordTransformer() {\n      var _this = this;\n      var applyTransformer = function applyTransformer(str, transformer) {\n        return transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;\n      };\n      return function (str) {\n        return applyTransformer(str, _this._wordTransformer);\n      };\n    }\n  }, {\n    key: \"_popStackItem\",\n    value: function _popStackItem() {\n      var item = this._stackItem;\n      this._stackItem = item.next;\n      return item;\n    }\n\n    /**\n     * Add a line break into currently built block.\n     */\n  }, {\n    key: \"addLineBreak\",\n    value: function addLineBreak() {\n      if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {\n        return;\n      }\n      if (this._stackItem.isPre) {\n        this._stackItem.rawText += '\\n';\n      } else {\n        this._stackItem.inlineTextBuilder.startNewLine();\n      }\n    }\n\n    /**\n     * Allow to break line in case directly following text will not fit.\n     */\n  }, {\n    key: \"addWordBreakOpportunity\",\n    value: function addWordBreakOpportunity() {\n      if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem) {\n        this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n      }\n    }\n\n    /**\n     * Add a node inline into the currently built block.\n     *\n     * @param { string } str\n     * Text content of a node to add.\n     *\n     * @param { object | boolean } [ optionsObjectOrNoWordTransform ]\n     * Object holding the parameters of the operation.\n     *\n     * Boolean value is deprecated.\n     *\n     * @param { boolean } [ optionsObjectOrNoWordTransform.noWordTransform = false ]\n     * Ignore word transformers if there are any.\n     */\n  }, {\n    key: \"addInline\",\n    value: function addInline(str) {\n      var optionsObjectOrNoWordTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof optionsObjectOrNoWordTransform === 'object') {\n        this._addInline(str, optionsObjectOrNoWordTransform);\n      } else {\n        this._addInline(str, {\n          noWordTransform: optionsObjectOrNoWordTransform\n        });\n      }\n    }\n  }, {\n    key: \"_addInline\",\n    value: function _addInline(str) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$noWordTransform = _ref.noWordTransform,\n        noWordTransform = _ref$noWordTransform === void 0 ? false : _ref$noWordTransform;\n      if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof TableCellStackItem)) {\n        return;\n      }\n      if (this._stackItem.isPre) {\n        this._stackItem.rawText += str;\n        return;\n      }\n      if (this.whitepaceProcessor.testContainsWords(str) ||\n      // There are words to add;\n      str.length && !this._stackItem.stashedLineBreaks // or at least spaces to take into account.\n      ) {\n        if (this._stackItem.stashedLineBreaks) {\n          this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n        this.whitepaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, this._wordTransformer && !noWordTransform ? this._getCombinedWordTransformer() : undefined);\n        this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n      }\n    }\n\n    /**\n     * Start building a new block.\n     *\n     * @param { object | number } [optionsObjectOrLeadingLineBreaks]\n     * Object holding the parameters of the block.\n     *\n     * Number value is deprecated.\n     *\n     * @param { number }  [optionsObjectOrLeadingLineBreaks.leadingLineBreaks = 1]\n     * This block should have at least this number of line breaks to separate if from any preceding block.\n     *\n     * @param { number }  [optionsObjectOrLeadingLineBreaks.reservedLineLength = 0]\n     * Reserve this number of characters on each line for block markup.\n     *\n     * @param { boolean } [optionsObjectOrLeadingLineBreaks.isPre = false]\n     * Should HTML whitespace be preserved inside this block.\n     *\n     * @param { number }  [reservedLineLength]\n     * Deprecated.\n     *\n     * @param { boolean } [isPre]\n     * Deprecated.\n     */\n  }, {\n    key: \"openBlock\",\n    value: function openBlock() {\n      var optionsObjectOrLeadingLineBreaks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var reservedLineLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      var isPre = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      if (typeof optionsObjectOrLeadingLineBreaks === 'object') {\n        this._openBlock(optionsObjectOrLeadingLineBreaks);\n      } else {\n        this._openBlock({\n          isPre: isPre,\n          leadingLineBreaks: optionsObjectOrLeadingLineBreaks,\n          reservedLineLength: reservedLineLength\n        });\n      }\n    }\n  }, {\n    key: \"_openBlock\",\n    value: function _openBlock() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref2$leadingLineBrea = _ref2.leadingLineBreaks,\n        leadingLineBreaks = _ref2$leadingLineBrea === void 0 ? 1 : _ref2$leadingLineBrea,\n        _ref2$reservedLineLen = _ref2.reservedLineLength,\n        reservedLineLength = _ref2$reservedLineLen === void 0 ? 0 : _ref2$reservedLineLen,\n        _ref2$isPre = _ref2.isPre,\n        isPre = _ref2$isPre === void 0 ? false : _ref2$isPre;\n      var maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n      this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);\n      if (isPre) {\n        this._stackItem.isPre = true;\n      }\n    }\n\n    /**\n     * Finalize currently built block, add it's content to the parent block.\n     *\n     * @param { object | number }         [optionsObjectOrTrailingLineBreaks]\n     * Object holding the parameters of the block.\n     *\n     * Number value is deprecated.\n     *\n     * @param { number }                  [optionsObjectOrTrailingLineBreaks.trailingLineBreaks = 1]\n     * This block should have at least this number of line breaks to separate it from any following block.\n     *\n     * @param { (str: string) => string } [optionsObjectOrTrailingLineBreaks.blockTransform = undefined]\n     * A function to transform the block text before adding to the parent block.\n     * This happens after word wrap and should be used in combination with reserved line length\n     * in order to keep line lengths correct.\n     * Used for whole block markup.\n     *\n     * @param { (str: string) => string } [blockTransform]\n     * Deprecated.\n     */\n  }, {\n    key: \"closeBlock\",\n    value: function closeBlock() {\n      var optionsObjectOrTrailingLineBreaks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var blockTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (typeof optionsObjectOrTrailingLineBreaks === 'object') {\n        this._closeBlock(optionsObjectOrTrailingLineBreaks);\n      } else {\n        this._closeBlock({\n          trailingLineBreaks: optionsObjectOrTrailingLineBreaks,\n          blockTransform: blockTransform\n        });\n      }\n    }\n  }, {\n    key: \"_closeBlock\",\n    value: function _closeBlock() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref3$trailingLineBre = _ref3.trailingLineBreaks,\n        trailingLineBreaks = _ref3$trailingLineBre === void 0 ? 1 : _ref3$trailingLineBre,\n        _ref3$blockTransform = _ref3.blockTransform,\n        blockTransform = _ref3$blockTransform === void 0 ? undefined : _ref3$blockTransform;\n      var block = this._popStackItem();\n      var blockText = blockTransform ? blockTransform(getText(block)) : getText(block);\n      addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n    }\n\n    /**\n     * Start building a table.\n     */\n  }, {\n    key: \"openTable\",\n    value: function openTable() {\n      this._stackItem = new TableStackItem(this._stackItem);\n    }\n\n    /**\n     * Start building a table row.\n     */\n  }, {\n    key: \"openTableRow\",\n    value: function openTableRow() {\n      if (!(this._stackItem instanceof TableStackItem)) {\n        throw new Error('Can\\'t add table row to something that is not a table! Check the formatter.');\n      }\n      this._stackItem = new TableRowStackItem(this._stackItem);\n    }\n\n    /**\n     * Start building a table cell.\n     *\n     * @param { object | number } [optionsObjectOrMaxColumnWidth = undefined]\n     * Object holding the parameters of the cell.\n     *\n     * Number value is deprecated.\n     *\n     * @param { number } [optionsObjectOrMaxColumnWidth.maxColumnWidth = undefined]\n     * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n     */\n  }, {\n    key: \"openTableCell\",\n    value: function openTableCell() {\n      var optionsObjectOrMaxColumnWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (typeof optionsObjectOrMaxColumnWidth === 'object') {\n        this._openTableCell(optionsObjectOrMaxColumnWidth);\n      } else {\n        this._openTableCell({\n          maxColumnWidth: optionsObjectOrMaxColumnWidth\n        });\n      }\n    }\n  }, {\n    key: \"_openTableCell\",\n    value: function _openTableCell() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref4$maxColumnWidth = _ref4.maxColumnWidth,\n        maxColumnWidth = _ref4$maxColumnWidth === void 0 ? undefined : _ref4$maxColumnWidth;\n      if (!(this._stackItem instanceof TableRowStackItem)) {\n        throw new Error('Can\\'t add table cell to something that is not a table row! Check the formatter.');\n      }\n      this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n    }\n\n    /**\n     * Finalize currently built table cell and add it to parent table row's cells.\n     *\n     * @param { object | number } [optionsObjectOrColspan]\n     * Object holding the parameters of the cell.\n     *\n     * Number value is deprecated.\n     *\n     * @param { number } [optionsObjectOrColspan.colspan = 1] How many columns this cell should occupy.\n     * @param { number } [optionsObjectOrColspan.rowspan = 1] How many rows this cell should occupy.\n     *\n     * @param { number } [rowspan] Deprecated.\n     */\n  }, {\n    key: \"closeTableCell\",\n    value: function closeTableCell() {\n      var optionsObjectOrColspan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var rowspan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (typeof optionsObjectOrColspan === 'object') {\n        this._closeTableCell(optionsObjectOrColspan);\n      } else {\n        this._closeTableCell({\n          colspan: optionsObjectOrColspan,\n          rowspan: rowspan\n        });\n      }\n    }\n  }, {\n    key: \"_closeTableCell\",\n    value: function _closeTableCell() {\n      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref5$colspan = _ref5.colspan,\n        colspan = _ref5$colspan === void 0 ? 1 : _ref5$colspan,\n        _ref5$rowspan = _ref5.rowspan,\n        rowspan = _ref5$rowspan === void 0 ? 1 : _ref5$rowspan;\n      var cell = this._popStackItem();\n      var text = trimCharacter(getText(cell), '\\n');\n      cell.next.cells.push({\n        colspan: colspan,\n        rowspan: rowspan,\n        text: text\n      });\n    }\n\n    /**\n     * Finalize currently built table row and add it to parent table's rows.\n     */\n  }, {\n    key: \"closeTableRow\",\n    value: function closeTableRow() {\n      var row = this._popStackItem();\n      row.next.rows.push(row.cells);\n    }\n\n    /**\n     * Finalize currently built table and add the rendered text to the parent block.\n     *\n     * @param { object | number } [optionsObjectOrColSpacing]\n     * Object holding the parameters of the table.\n     *\n     * Number value is depreceted.\n     *\n     * @param { number } [optionsObjectOrColSpacing.colSpacing = 3]\n     * Number of spaces between table columns.\n     *\n     * @param { number } [optionsObjectOrColSpacing.rowSpacing = 0]\n     * Number of empty lines between table rows.\n     *\n     * @param { number } [optionsObjectOrColSpacing.leadingLineBreaks = 2]\n     * This table should have at least this number of line breaks to separate if from any preceding block.\n     *\n     * @param { number } [optionsObjectOrColSpacing.trailingLineBreaks = 2]\n     * This table should have at least this number of line breaks to separate it from any following block.\n     *\n     * @param { number } [rowSpacing]\n     * Deprecated.\n     *\n     * @param { number } [leadingLineBreaks]\n     * Deprecated.\n     *\n     * @param { number } [trailingLineBreaks]\n     * Deprecated.\n     */\n  }, {\n    key: \"closeTable\",\n    value: function closeTable() {\n      var optionsObjectOrColSpacing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var rowSpacing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      var leadingLineBreaks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var trailingLineBreaks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;\n      if (typeof optionsObjectOrColSpacing === 'object') {\n        this._closeTable(optionsObjectOrColSpacing);\n      } else {\n        this._closeTable({\n          colSpacing: optionsObjectOrColSpacing,\n          leadingLineBreaks: leadingLineBreaks,\n          rowSpacing: rowSpacing,\n          trailingLineBreaks: trailingLineBreaks\n        });\n      }\n    }\n  }, {\n    key: \"_closeTable\",\n    value: function _closeTable() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref6$colSpacing = _ref6.colSpacing,\n        colSpacing = _ref6$colSpacing === void 0 ? 3 : _ref6$colSpacing,\n        _ref6$rowSpacing = _ref6.rowSpacing,\n        rowSpacing = _ref6$rowSpacing === void 0 ? 0 : _ref6$rowSpacing,\n        _ref6$leadingLineBrea = _ref6.leadingLineBreaks,\n        leadingLineBreaks = _ref6$leadingLineBrea === void 0 ? 2 : _ref6$leadingLineBrea,\n        _ref6$trailingLineBre = _ref6.trailingLineBreaks,\n        trailingLineBreaks = _ref6$trailingLineBre === void 0 ? 2 : _ref6$trailingLineBre;\n      var table = this._popStackItem();\n      var output = tableToString(table.rows, rowSpacing, colSpacing);\n      if (output) {\n        addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n      }\n    }\n\n    /**\n     * Return the rendered text content of this builder.\n     *\n     * @returns { string }\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return getText(this._stackItem.getRoot());\n      // There should only be the root item if everything is closed properly.\n    }\n  }]);\n  return BlockTextBuilder;\n}();\nfunction getText(stackItem) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks and table cells can be requested for text contents.');\n  }\n  return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\nfunction addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n  if (!(stackItem instanceof BlockStackItem || stackItem instanceof TableCellStackItem)) {\n    throw new Error('Only blocks and table cells can contain text.');\n  }\n  var parentText = getText(stackItem);\n  var lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n  stackItem.inlineTextBuilder.clear();\n  if (parentText) {\n    stackItem.rawText = parentText + '\\n'.repeat(lineBreaks) + text;\n  } else {\n    stackItem.rawText = text;\n    stackItem.leadingLineBreaks = lineBreaks;\n  }\n  stackItem.stashedLineBreaks = trailingLineBreaks;\n}\nmodule.exports = {\n  BlockTextBuilder: BlockTextBuilder\n};","map":{"version":3,"names":["require","trimCharacter","StackItem","BlockStackItem","TableCellStackItem","TableRowStackItem","TableStackItem","TransformerStackItem","tableToString","WhitespaceProcessor","BlockTextBuilder","options","whitepaceProcessor","_stackItem","_wordTransformer","undefined","wordTransform","transform","next","applyTransformer","str","transformer","item","isPre","rawText","inlineTextBuilder","startNewLine","wordBreakOpportunity","optionsObjectOrNoWordTransform","_addInline","noWordTransform","testContainsWords","length","stashedLineBreaks","shrinkWrapAdd","_getCombinedWordTransformer","optionsObjectOrLeadingLineBreaks","reservedLineLength","_openBlock","leadingLineBreaks","maxLineLength","Math","max","optionsObjectOrTrailingLineBreaks","blockTransform","_closeBlock","trailingLineBreaks","block","_popStackItem","blockText","getText","addText","Error","optionsObjectOrMaxColumnWidth","_openTableCell","maxColumnWidth","optionsObjectOrColspan","rowspan","_closeTableCell","colspan","cell","text","cells","push","row","rows","optionsObjectOrColSpacing","rowSpacing","_closeTable","colSpacing","table","output","getRoot","stackItem","isEmpty","toString","parentText","lineBreaks","clear","repeat","module","exports"],"sources":["C:/Users/AVITA/Desktop/chatbot/node_modules/html-to-text/lib/block-text-builder.js"],"sourcesContent":["\nconst { trimCharacter } = require('./helper');\n// eslint-disable-next-line no-unused-vars\nconst { StackItem, BlockStackItem, TableCellStackItem, TableRowStackItem, TableStackItem, TransformerStackItem }\n  = require('./stack-item');\nconst { tableToString } = require('./table-printer');\nconst { WhitespaceProcessor } = require('./whitespace-processor');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */\nclass BlockTextBuilder {\n\n  /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   */\n  constructor (options) {\n    this.options = options;\n    this.whitepaceProcessor = new WhitespaceProcessor(options);\n    /** @type { StackItem } */\n    this._stackItem = new BlockStackItem(options);\n    /** @type { TransformerStackItem } */\n    this._wordTransformer = undefined;\n  }\n\n  /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */\n  pushWordTransform (wordTransform) {\n    this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n  }\n\n  /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */\n  popWordTransform () {\n    if (!this._wordTransformer) { return undefined; }\n    const transform = this._wordTransformer.transform;\n    this._wordTransformer = this._wordTransformer.next;\n    return transform;\n  }\n\n  /** @returns { (str: string) => string } */\n  _getCombinedWordTransformer () {\n    const applyTransformer = (str, transformer) =>\n      ((transformer) ? applyTransformer(transformer.transform(str), transformer.next) : str);\n    return (str) => applyTransformer(str, this._wordTransformer);\n  }\n\n  _popStackItem () {\n    const item = this._stackItem;\n    this._stackItem = item.next;\n    return item;\n  }\n\n  /**\n   * Add a line break into currently built block.\n   */\n  addLineBreak () {\n    if (!(\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    )) { return; }\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += '\\n';\n    } else {\n      this._stackItem.inlineTextBuilder.startNewLine();\n    }\n  }\n\n  /**\n   * Allow to break line in case directly following text will not fit.\n   */\n  addWordBreakOpportunity () {\n    if (\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    ) {\n      this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n    }\n  }\n\n  /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object | boolean } [ optionsObjectOrNoWordTransform ]\n   * Object holding the parameters of the operation.\n   *\n   * Boolean value is deprecated.\n   *\n   * @param { boolean } [ optionsObjectOrNoWordTransform.noWordTransform = false ]\n   * Ignore word transformers if there are any.\n   */\n  addInline (str, optionsObjectOrNoWordTransform = {}) {\n    if (typeof optionsObjectOrNoWordTransform === 'object') {\n      this._addInline(str, optionsObjectOrNoWordTransform);\n    } else {\n      this._addInline(str, { noWordTransform: optionsObjectOrNoWordTransform });\n    }\n  }\n\n  _addInline (str, { noWordTransform = false } = {}) {\n    if (!(\n      this._stackItem instanceof BlockStackItem\n      || this._stackItem instanceof TableCellStackItem\n    )) { return; }\n\n    if (this._stackItem.isPre) {\n      this._stackItem.rawText += str;\n      return;\n    }\n\n    if (\n      this.whitepaceProcessor.testContainsWords(str) || // There are words to add;\n      (str.length && !this._stackItem.stashedLineBreaks) // or at least spaces to take into account.\n    ) {\n      if (this._stackItem.stashedLineBreaks) {\n        this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n      }\n      this.whitepaceProcessor.shrinkWrapAdd(\n        str,\n        this._stackItem.inlineTextBuilder,\n        (this._wordTransformer && !noWordTransform) ? this._getCombinedWordTransformer() : undefined\n      );\n      this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n    }\n  }\n\n  /**\n   * Start building a new block.\n   *\n   * @param { object | number } [optionsObjectOrLeadingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.leadingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number }  [optionsObjectOrLeadingLineBreaks.reservedLineLength = 0]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [optionsObjectOrLeadingLineBreaks.isPre = false]\n   * Should HTML whitespace be preserved inside this block.\n   *\n   * @param { number }  [reservedLineLength]\n   * Deprecated.\n   *\n   * @param { boolean } [isPre]\n   * Deprecated.\n   */\n  openBlock (optionsObjectOrLeadingLineBreaks = {}, reservedLineLength = undefined, isPre = undefined) {\n    if (typeof optionsObjectOrLeadingLineBreaks === 'object') {\n      this._openBlock(optionsObjectOrLeadingLineBreaks);\n    } else {\n      this._openBlock({\n        isPre: isPre,\n        leadingLineBreaks: optionsObjectOrLeadingLineBreaks,\n        reservedLineLength: reservedLineLength,\n      });\n    }\n  }\n\n  _openBlock ({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {\n    const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n    this._stackItem = new BlockStackItem(\n      this.options,\n      this._stackItem,\n      leadingLineBreaks,\n      maxLineLength\n    );\n    if (isPre) { this._stackItem.isPre = true; }\n  }\n\n  /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object | number }         [optionsObjectOrTrailingLineBreaks]\n   * Object holding the parameters of the block.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number }                  [optionsObjectOrTrailingLineBreaks.trailingLineBreaks = 1]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [optionsObjectOrTrailingLineBreaks.blockTransform = undefined]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   *\n   * @param { (str: string) => string } [blockTransform]\n   * Deprecated.\n   */\n  closeBlock (optionsObjectOrTrailingLineBreaks = {}, blockTransform = undefined) {\n    if (typeof optionsObjectOrTrailingLineBreaks === 'object') {\n      this._closeBlock(optionsObjectOrTrailingLineBreaks);\n    } else {\n      this._closeBlock({\n        trailingLineBreaks: optionsObjectOrTrailingLineBreaks,\n        blockTransform: blockTransform,\n      });\n    }\n  }\n\n  _closeBlock ({ trailingLineBreaks = 1, blockTransform = undefined } = {}) {\n    const block = this._popStackItem();\n    const blockText = (blockTransform) ? blockTransform(getText(block)) : getText(block);\n    addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n  }\n\n  /**\n   * Start building a table.\n   */\n  openTable () {\n    this._stackItem = new TableStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table row.\n   */\n  openTableRow () {\n    if (!(this._stackItem instanceof TableStackItem)) {\n      throw new Error('Can\\'t add table row to something that is not a table! Check the formatter.');\n    }\n    this._stackItem = new TableRowStackItem(this._stackItem);\n  }\n\n  /**\n   * Start building a table cell.\n   *\n   * @param { object | number } [optionsObjectOrMaxColumnWidth = undefined]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrMaxColumnWidth.maxColumnWidth = undefined]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */\n  openTableCell (optionsObjectOrMaxColumnWidth = {}) {\n    if (typeof optionsObjectOrMaxColumnWidth === 'object') {\n      this._openTableCell(optionsObjectOrMaxColumnWidth);\n    } else {\n      this._openTableCell({ maxColumnWidth: optionsObjectOrMaxColumnWidth });\n    }\n  }\n\n  _openTableCell ({ maxColumnWidth = undefined } = {}) {\n    if (!(this._stackItem instanceof TableRowStackItem)) {\n      throw new Error('Can\\'t add table cell to something that is not a table row! Check the formatter.');\n    }\n    this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n  }\n\n  /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object | number } [optionsObjectOrColspan]\n   * Object holding the parameters of the cell.\n   *\n   * Number value is deprecated.\n   *\n   * @param { number } [optionsObjectOrColspan.colspan = 1] How many columns this cell should occupy.\n   * @param { number } [optionsObjectOrColspan.rowspan = 1] How many rows this cell should occupy.\n   *\n   * @param { number } [rowspan] Deprecated.\n   */\n  closeTableCell (optionsObjectOrColspan = {}, rowspan = undefined) {\n    if (typeof optionsObjectOrColspan === 'object') {\n      this._closeTableCell(optionsObjectOrColspan);\n    } else {\n      this._closeTableCell({\n        colspan: optionsObjectOrColspan,\n        rowspan: rowspan,\n      });\n    }\n  }\n\n  _closeTableCell ({ colspan = 1, rowspan = 1 } = {}) {\n    const cell = this._popStackItem();\n    const text = trimCharacter(getText(cell), '\\n');\n    cell.next.cells.push({ colspan: colspan, rowspan: rowspan, text: text });\n  }\n\n  /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */\n  closeTableRow () {\n    const row = this._popStackItem();\n    row.next.rows.push(row.cells);\n  }\n\n  /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object | number } [optionsObjectOrColSpacing]\n   * Object holding the parameters of the table.\n   *\n   * Number value is depreceted.\n   *\n   * @param { number } [optionsObjectOrColSpacing.colSpacing = 3]\n   * Number of spaces between table columns.\n   *\n   * @param { number } [optionsObjectOrColSpacing.rowSpacing = 0]\n   * Number of empty lines between table rows.\n   *\n   * @param { number } [optionsObjectOrColSpacing.leadingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [optionsObjectOrColSpacing.trailingLineBreaks = 2]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { number } [rowSpacing]\n   * Deprecated.\n   *\n   * @param { number } [leadingLineBreaks]\n   * Deprecated.\n   *\n   * @param { number } [trailingLineBreaks]\n   * Deprecated.\n   */\n  closeTable (\n    optionsObjectOrColSpacing = {},\n    rowSpacing = undefined,\n    leadingLineBreaks = undefined,\n    trailingLineBreaks = undefined\n  ) {\n    if (typeof optionsObjectOrColSpacing === 'object') {\n      this._closeTable(optionsObjectOrColSpacing);\n    } else {\n      this._closeTable({\n        colSpacing: optionsObjectOrColSpacing,\n        leadingLineBreaks: leadingLineBreaks,\n        rowSpacing: rowSpacing,\n        trailingLineBreaks: trailingLineBreaks\n      });\n    }\n  }\n\n  _closeTable ({ colSpacing = 3, rowSpacing = 0, leadingLineBreaks = 2, trailingLineBreaks = 2 } = {}) {\n    const table = this._popStackItem();\n    const output = tableToString(table.rows, rowSpacing, colSpacing);\n    if (output) {\n      addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n    }\n  }\n\n  /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */\n  toString () {\n    return getText(this._stackItem.getRoot());\n    // There should only be the root item if everything is closed properly.\n  }\n\n}\n\nfunction getText (stackItem) {\n  if (!(\n    stackItem instanceof BlockStackItem\n    || stackItem instanceof TableCellStackItem\n  )) {\n    throw new Error('Only blocks and table cells can be requested for text contents.');\n  }\n  return (stackItem.inlineTextBuilder.isEmpty())\n    ? stackItem.rawText\n    : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\n\nfunction addText (stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n  if (!(\n    stackItem instanceof BlockStackItem\n    || stackItem instanceof TableCellStackItem\n  )) {\n    throw new Error('Only blocks and table cells can contain text.');\n  }\n  const parentText = getText(stackItem);\n  const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n  stackItem.inlineTextBuilder.clear();\n  if (parentText) {\n    stackItem.rawText = parentText + '\\n'.repeat(lineBreaks) + text;\n  } else {\n    stackItem.rawText = text;\n    stackItem.leadingLineBreaks = lineBreaks;\n  }\n  stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n\nmodule.exports = { BlockTextBuilder: BlockTextBuilder };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}