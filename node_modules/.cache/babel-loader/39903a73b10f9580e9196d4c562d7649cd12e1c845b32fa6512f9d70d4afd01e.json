{"ast":null,"code":"/**\n * Split given tag selector into it's components.\n * Only element name, class names and ID names are supported.\n *\n * @param { string } selector Tag selector (\"tag.class#id\" etc).\n * @returns { { classes: string[], element: string, ids: string[] } }\n */\nfunction splitSelector(selector) {\n  function getParams(re, string) {\n    const captures = [];\n    let found;\n    while ((found = re.exec(string)) !== null) {\n      captures.push(found[1]);\n    }\n    return captures;\n  }\n  return {\n    classes: getParams(/\\.([\\d\\w-]*)/g, selector),\n    element: /(^\\w*)/g.exec(selector)[1],\n    ids: getParams(/#([\\d\\w-]*)/g, selector)\n  };\n}\n\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */\nfunction splitClassesAndIds(selectors) {\n  const classes = [];\n  const ids = [];\n  for (const selector of selectors) {\n    if (selector.startsWith('.')) {\n      classes.push(selector.substring(1));\n    } else if (selector.startsWith('#')) {\n      ids.push(selector.substring(1));\n    }\n  }\n  return {\n    classes: classes,\n    ids: ids\n  };\n}\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */\nfunction limitedDepthRecursive(n, f) {\n  let g = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => undefined;\n  if (n === undefined) {\n    const f1 = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return f(f1, ...args);\n    };\n    return f1;\n  }\n  if (n >= 0) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return f(limitedDepthRecursive(n - 1, f, g), ...args);\n    };\n  }\n  return g;\n}\n\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */\nfunction numberToLetterSequence(num) {\n  let baseChar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'a';\n  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 26;\n  const digits = [];\n  do {\n    num -= 1;\n    digits.push(num % base);\n    num = num / base >> 0; // quick `floor`\n  } while (num > 0);\n  const baseCode = baseChar.charCodeAt(0);\n  return digits.reverse().map(n => String.fromCharCode(baseCode + n)).join('');\n}\nconst I = ['I', 'X', 'C', 'M'];\nconst V = ['V', 'L', 'D'];\n\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */\nfunction numberToRoman(num) {\n  return [...(num + '')].map(n => +n).reverse().map((v, i) => v % 5 < 4 ? (v < 5 ? '' : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join('');\n}\n\n/**\n * Return the same string or a substring with the given character occurences removed from each end if any.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\nfunction trimCharacter(str, char) {\n  let start = 0;\n  let end = str.length;\n  while (start < end && str[start] === char) {\n    ++start;\n  }\n  while (end > start && str[end - 1] === char) {\n    --end;\n  }\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\n\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */\nfunction get(obj, path) {\n  for (const key of path) {\n    if (!obj) {\n      return undefined;\n    }\n    obj = obj[key];\n  }\n  return obj;\n}\n\n/**\n * Set a nested property of an object.\n *\n * @param { object }   obj   The object to modify.\n * @param { string[] } path  The path to the property.\n * @param { any }      value The value to set.\n */\nfunction set(obj, path, value) {\n  const valueKey = path.pop();\n  for (const key of path) {\n    let nested = obj[key];\n    if (!nested) {\n      nested = {};\n      obj[key] = nested;\n    }\n    obj = nested;\n  }\n  obj[valueKey] = value;\n}\nmodule.exports = {\n  get: get,\n  limitedDepthRecursive: limitedDepthRecursive,\n  numberToLetterSequence: numberToLetterSequence,\n  numberToRoman: numberToRoman,\n  set: set,\n  splitClassesAndIds: splitClassesAndIds,\n  splitSelector: splitSelector,\n  trimCharacter: trimCharacter\n};","map":{"version":3,"names":["splitSelector","selector","getParams","re","string","captures","found","exec","push","classes","element","ids","splitClassesAndIds","selectors","startsWith","substring","limitedDepthRecursive","n","f","g","undefined","f1","args","numberToLetterSequence","num","baseChar","base","digits","baseCode","charCodeAt","reverse","map","String","fromCharCode","join","I","V","numberToRoman","v","i","repeat","trimCharacter","str","char","start","end","length","get","obj","path","key","set","value","valueKey","pop","nested","module","exports"],"sources":["C:/Users/AVITA/Desktop/chatbot/node_modules/html-to-text/lib/helper.js"],"sourcesContent":["\n/**\n * Split given tag selector into it's components.\n * Only element name, class names and ID names are supported.\n *\n * @param { string } selector Tag selector (\"tag.class#id\" etc).\n * @returns { { classes: string[], element: string, ids: string[] } }\n */\nfunction splitSelector (selector) {\n  function getParams (re, string) {\n    const captures = [];\n    let found;\n    while ((found = re.exec(string)) !== null) {\n      captures.push(found[1]);\n    }\n    return captures;\n  }\n\n  return {\n    classes: getParams(/\\.([\\d\\w-]*)/g, selector),\n    element: /(^\\w*)/g.exec(selector)[1],\n    ids: getParams(/#([\\d\\w-]*)/g, selector)\n  };\n}\n\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */\nfunction splitClassesAndIds (selectors) {\n  const classes = [];\n  const ids = [];\n  for (const selector of selectors) {\n    if (selector.startsWith('.')) {\n      classes.push(selector.substring(1));\n    } else if (selector.startsWith('#')) {\n      ids.push(selector.substring(1));\n    }\n  }\n  return { classes: classes, ids: ids };\n}\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */\nfunction limitedDepthRecursive (n, f, g = () => undefined) {\n  if (n === undefined) {\n    const f1 = function (...args) { return f(f1, ...args); };\n    return f1;\n  }\n  if (n >= 0) {\n    return function (...args) { return f(limitedDepthRecursive(n - 1, f, g), ...args); };\n  }\n  return g;\n}\n\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */\nfunction numberToLetterSequence (num, baseChar = 'a', base = 26) {\n  const digits = [];\n  do {\n    num -= 1;\n    digits.push(num % base);\n    num = (num / base) >> 0; // quick `floor`\n  } while (num > 0);\n  const baseCode = baseChar.charCodeAt(0);\n  return digits\n    .reverse()\n    .map(n => String.fromCharCode(baseCode + n))\n    .join('');\n}\n\nconst I = ['I', 'X', 'C', 'M'];\nconst V = ['V', 'L', 'D'];\n\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */\nfunction numberToRoman (num) {\n  return [...(num) + '']\n    .map(n => +n)\n    .reverse()\n    .map((v, i) => ((v % 5 < 4)\n      ? (v < 5 ? '' : V[i]) + I[i].repeat(v % 5)\n      : I[i] + (v < 5 ? V[i] : I[i + 1])))\n    .reverse()\n    .join('');\n}\n\n/**\n * Return the same string or a substring with the given character occurences removed from each end if any.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */\nfunction trimCharacter (str, char) {\n  let start = 0;\n  let end = str.length;\n  while (start < end && str[start] === char) { ++start; }\n  while (end > start && str[end - 1] === char) { --end; }\n  return (start > 0 || end < str.length)\n    ? str.substring(start, end)\n    : str;\n}\n\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */\nfunction get (obj, path) {\n  for (const key of path) {\n    if (!obj) { return undefined; }\n    obj = obj[key];\n  }\n  return obj;\n}\n\n/**\n * Set a nested property of an object.\n *\n * @param { object }   obj   The object to modify.\n * @param { string[] } path  The path to the property.\n * @param { any }      value The value to set.\n */\nfunction set (obj, path, value) {\n  const valueKey = path.pop();\n  for (const key of path) {\n    let nested = obj[key];\n    if (!nested) {\n      nested = {};\n      obj[key] = nested;\n    }\n    obj = nested;\n  }\n  obj[valueKey] = value;\n}\n\nmodule.exports = {\n  get: get,\n  limitedDepthRecursive: limitedDepthRecursive,\n  numberToLetterSequence: numberToLetterSequence,\n  numberToRoman: numberToRoman,\n  set: set,\n  splitClassesAndIds: splitClassesAndIds,\n  splitSelector: splitSelector,\n  trimCharacter: trimCharacter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}